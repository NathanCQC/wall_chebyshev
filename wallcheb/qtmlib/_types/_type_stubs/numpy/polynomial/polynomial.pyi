import numpy as np
from numpy.typing import NDArray
from typing import Optional, Any

class Polynomial:
    def __init__(
            self,
            coef: NDArray[np.complex128 | np.float64] | list[float],
            domain: Optional[NDArray[np.int64]] = None,
            window: Optional[NDArray[np.int64]] = None,
            symbol: Optional[str] = None,
    ) -> None: ...
    def __call__(self, arg: Any) -> Any: ...
    def __len__(self) -> int: ...
    def roots(self) -> NDArray[np.complex128 | np.float64]: ...
    @property
    def coef(self) -> NDArray[np.complex128 | np.float64]:...
    @classmethod
    def polyfromroots(cls, roots: NDArray[np.complex128 | np.float64]) -> Polynomial:...

def polyfromroots(roots: NDArray[np.complex128 | np.float64]) -> NDArray[np.complex128 | np.float64]:...